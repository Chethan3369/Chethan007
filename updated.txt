import React, { useEffect, useRef } from "react";
import { gsap } from "gsap";
import { ScrollTrigger } from "gsap/ScrollTrigger";
import { registerVevComponent } from "@vev/react";

gsap.registerPlugin(ScrollTrigger);

const ControlNumi = ({
  headingText = "Always On Control",
  remotePanelSrc = "./remotePanel.png",
  arrowSrc = "./kArrow.svg",
}) => {
  const controlPanelRef = useRef(null);
  const arrowsRef = useRef([]);
  const textsRef = useRef([]);
  const sectionRef = useRef(null);

  useEffect(() => {
    const arrowTranslateY = 50;

    // Arrows animation
    arrowsRef.current.forEach((arrow) => {
      gsap.fromTo(
        arrow,
        { opacity: 0, y: arrowTranslateY },
        {
          opacity: 1,
          y: 0,
          scrollTrigger: {
            trigger: arrow,
            start: "top 80%",
            end: "top 80%",
            scrub: true,
          },
        }
      );
    });

    // Text animation
    textsRef.current.forEach((text) => {
      gsap.fromTo(
        text,
        { opacity: 0, y: arrowTranslateY },
        {
          opacity: 1,
          y: 0,
          scrollTrigger: {
            trigger: text,
            start: "top 70%",
            end: "top 70%",
            scrub: true,
          },
        }
      );
    });

    // Whole section animation
    const sectionAnimation = gsap.fromTo(
      sectionRef.current,
      { scale: 1.5, opacity: 0 },
      {
        scale: 1,
        opacity: 1,
        duration: 2,
        paused: true,
        scrollTrigger: {
          trigger: sectionRef.current,
          start: "top center",
          end: "bottom center",
          scrub: false,
          onEnter: () => sectionAnimation.restart(),
          onLeaveBack: () => sectionAnimation.reverse(),
        },
      }
    );

    return () => {
      ScrollTrigger.getAll().forEach((trigger) => trigger.kill());
    };
  }, []);

  return (
    <section
      ref={sectionRef}
      className="Eight-section overflow-hidden min-h-screen"
    >
      <div className="control-section flex items-center justify-center py-10 min-h-screen">
        <div className="control-text mr-15 text-left">
          <h1 className="text-5xl font-bold text-gradient mb-5">{headingText}</h1>
        </div>
        <div
          className="control-panel relative flex items-center"
          ref={controlPanelRef}
        >
          <div className="control-image-container relative ">
            <img
              src={remotePanelSrc}
              alt="Control Panel"
              className="w-80 rounded-full shadow-lg"
            />
            {[9, 31, 42, 69, 87.5].map((top, index) => (
              <img
                key={index}
                className={`absolute top-[${top}%] right-[-50px] w-3 h-3`}
                src={arrowSrc}
                alt={`arrow-${index}`}
                ref={(el) => (arrowsRef.current[index] = el)}
              />
            ))}
          </div>
          <div className="arrows-container relative min-h-screen">
            {[148, 220, 340, 400].map((top, index) => (
              <div
                key={index}
                className={`absolute top-[${top}px] right-[-20px] w-[160px] h-0.5 bg-gray-50`}
                ref={(el) => (arrowsRef.current[5 + index] = el)}
              />
            ))}
          </div>
          <div className="relative pla min-h-[500px]">
            {[
              "Play / Pause Music",
              "Spray Pressure",
              "Spray Angle",
              "Heated Seating",
              "LED Lighting",
            ].map((text, index) => (
              <p
                key={index}
                className="absolute text-white text-lg right-[-240px] top-[21.5%]"
                ref={(el) => (textsRef.current[index] = el)}
              >
                {text}
              </p>
            ))}
          </div>
        </div>
      </div>
    </section>
  );
};

// Register component with Vev
registerVevComponent(ControlNumi, {
  name: "ControlNumi",
  props: {
    headingText: {
      type: "string",
      defaultValue: "Always On Control",
    },
    remotePanelSrc: {
      type: "image",
      defaultValue: "./remotePanel.png",
    },
    arrowSrc: {
      type: "image",
      defaultValue: "./kArrow.svg",
    },
  },
});

export default ControlNumi;
